// const [state, setState] = useState({
//       series: [

//       ],

//       options: {
//         chart: {
//           type: 'bar',
//           height: 350
//         },

//         noData: {
//           text: 'Loading...',
//           style:{
//             color: "#abaaa7",
//             fontSize: "20"
//           }
//         },

//         title: {
//             text: 'Building Energy Consumption',
//             style:{
//               color: "#abaaa7",
//               fontSize: 18,
                
//             }
//         },
        
        
//       },

      
// })

// var url = 'http://my-json-server.typicode.com/apexcharts/apexcharts.js/yearly';
// $.getJSON(url, function(response) {
//   chart.updateSeries([{
//     name: 'Sales',
//     data: response
//   }])
// });  
    



 // plotOptions: {
  //   bar: {
  //     horizontal: false,
  //     columnWidth: '55%',
  //     endingShape: 'rounded'
  //   },
  // },
  // title: {
  //     text: 'Building Energy Consumption',
  //     style:{
  //       color: "#abaaa7",
  //       fontSize: 18,
        
  //      }
  // },
  // dataLabels: {
  //   enabled: false
  // },
  // stroke: {
  //   show: true,
  //   width: 2,
  //   colors: ['transparent']
  // },
  // xaxis: {
  //   categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',],
  //   labels:{
  //     style:{
  //       colors: ["#abaaa7","#abaaa7","#abaaa7","#abaaa7","#abaaa7","#abaaa7",],
  //       fontSize: '12px',
  //     }
  //   }
   
  // },
  // yaxis: {
  //   title: {
  //     text: '$ (thousands)',
  //     style:{
  //       color: "#abaaa7",
  //       fontSize: 14,
        
  //      }
      
  //   }
  // },
  // fill: {
  //   opacity: 1
  // },
  // tooltip: {
  //   //Hover Box
  //   enabled: true,
  //   theme: "dark",
  //   y: {
  //     formatter: function (val) {
  //       return "$ " + val + " thousands"
  //     }
  //   }
  // }


------------------------------------------------------------------------------------------------
FULLY WORKING GRAPH 2

import { useEffect, useState} from "react";
// import ReactApexChart from "react-apexcharts";
// import "../App.css";
// import { tokens } from "../theme";
// import { useTheme, Typography } from "@mui/material";
// import axios from 'axios';





// // For Sub heading 2 Energy Consumption

// const Graph2 = () => {

//   const [options, setObject] = useState({
//       chart: {
//         type: 'bar',
//         height: 350
//       },
//       xaxis: {
//         categories: [],
//       },
    
//   })

//   const [series, setSeries] = useState([
//     {
//       name: 'Net Profit',
//       data: []
//     }

//   ])
  
//   useEffect(() =>{

//     const xAxis = []
//     const yAxis = []

//     axios.get("http://localhost:3000/yearly")
//     .then(response => {
//       console.log("response",response)
//       response.data.map(item => {
//         console.log("item",item)
//           xAxis.push(item.x)
//           yAxis.push(item.y)
//       })
//       setObject({
//         chart: {
//           type: 'bar',
//           height: 350
//         },
//         xaxis: {
//           categories: xAxis
//         },
//       })
//       setSeries([
//       {
//         name: 'Net Profit',
//         data: yAxis
//       }
//      ])
//       console.log("stats",xAxis,yAxis)
//     }).catch(e => {
//       alert(e);
//     })
    
  
//   }, [])
   
      
      
      
    


//   return( 
//     <div class='diagramContainer'>

//       {/* {chartData && chartData?.series && ( */}
//         <ReactApexChart
//           options={options}
//           series={series}
//           type="bar"
//           height={"100%"} 
//           width={"100%"}
//         />
//       {/* )} */}


//         {/* <ReactApexChart options={state.options} series={state.series} type="bar" height={"100%"} width={"100%"}/> */}




//     </div>
//    )

//   };
// export default Graph2;

















 useEffect(() =>{
    
    fetch("http://localhost:3000/yearly")
    .then(response => response.json())
    .catch(err => console.log(err))
    .then(json => {
      const { data } = json
      setChartData({
        // OPTIONS
        options: {
          chart: {
            height: 350
          },
         
          title: {
              text: 'Building Energy Consumption',
              style:{
                color: "#abaaa7",
                fontSize: 18,
                
               }
          },
          dataLabels: {
            enabled: true
          },
         
          xaxis: {
            categories:  data.map(item => item?.x)
           },
          yaxis: {
            title: {
              text: 'R (thousands)',
              style:{
                color: "#abaaa7",
                fontSize: 14,
                
               }
            }
          },
         
         
        },
        // SERIES
        series: [
          {
            name: 'Yearly Profit',
            data: data.map(item => item?.y)
          }
        ],






      })
    })
  }, [])

  -------------------------------------------------------------------

  Fully working graph3 

  // import React, { useEffect, useState} from "react";
// import ReactApexChart from "react-apexcharts";
// import "../App.css";
// import { tokens } from "../theme";
// import { useTheme, Typography } from "@mui/material";
// import axios from 'axios';






// // For Sub heading 2 Energy Consumption

// const Graph3 = () => {

//   const [options, setObject] = useState({
//       chart: {
//         type: 'line',
//         height: 350
//       },
//       noData: {
//         text: 'Loading...',
//         style:{
//         color: "#abaaa7",
//         fontSize: "20"
//       }
//     },
//       xaxis: {
//         categories: [],
//       },
//       fill: {
//         opacity: 1
//       },
//       tooltip: {
//         //Hover Box
//         enabled: true,
//         theme: "dark",
//         y: {
//           formatter: function (val) {
//             return  (val + " Kw\\h")
//           }
//         }
//       },
//       yaxis: {
//         title: {
//           text: 'Kw\\h',
//           style:{
//             color: "#abaaa7",
//             fontSize: 14,
            
//            }
//         }
      
//       },
//       title: {
//           text: 'Standard Other Building Consumption',
//           style:{
//             color: "#abaaa7",
//             fontSize: 18,
            
//            }
//       },
//       dataLabels: {
//         enabled: true
//       },
     
//       legend: {
//         show: true
//       }
    
//   })

//   const [series, setSeries] = useState([
    
//     {
//       name: 'Profit',
//       data: []
//     },
//     {
//       name: 'Standard',
//       data: [100,100,100]
//     }

//   ])

//   // const [dataa, setData] = useState({})
  
//   useEffect(() =>{

//     const xAxis = []
//     const yAxis = []

//      axios.get('/electricity')
//     // .then(res => res.json())
//     // .then(
//     //   dataa => {
//     //     setData(dataa)
//     //     console.log("python",dataa)
//     //   }
//     // )
//      .then(response => {
//        console.log("response",response)
//        response.data.energy_consumption.map(item => {
//          console.log("item",item)
//            xAxis.push(item.time)
//            yAxis.push(item.load_power)
//        })
//        setObject({
//          chart: {
//            type: 'line',
//            height: 350
//          },
//          xaxis: {
//            categories: xAxis
//          },
//        })
//        setSeries([
//        {
//         name: 'Solar Energy',
//         data: yAxis
//       },
//       ])
//        console.log("stats",xAxis,yAxis)
//      }).catch(e => {
//        alert(e);
//      })
    
  
//   }, [])
   
      
      
      
    


//   return( 
//     <div class='diagramContainer'>

//       {/* {chartData && chartData?.series && ( */}
//         <ReactApexChart
//           options={options}
//           series={series}
//           type="line"
//           height={"100%"} 
//           width={"100%"}
//         />
//       {/* )} */}


//         {/* <ReactApexChart options={state.options} series={state.series} type="bar" height={"100%"} width={"100%"}/> */}


 

//     </div>
//    )

//   };
// export default Graph3;

-----------------------------------------------------------------------------

Fully working graph6

import React, { useEffect, useState} from "react";
import ReactApexChart from "react-apexcharts";
import "../App.css";
import { tokens } from "../theme";
import { useTheme, Typography } from "@mui/material";
import axios from 'axios';






// For Sub heading 4 WATER USAGE

const Graph6 = () => {

  const [options, setObject] = useState({
      chart: {
        type: 'bar',
        foreColor: "#939695",
        
      },
      noData: {
        text: 'Loading...',
        style:{
        color: "#abaaa7",
        fontSize: "20"
      }
    },
      xaxis: {
        // title: {
        //   text: ""
        // },
        categories: [],
      },
      fill: {
        opacity: 1
      },
      dataLabels: {
        enabled: false
      },
      tooltip: {
        //Hover Box
        enabled: true,
        theme: "dark",
        y: {
          formatter: function (val) {
            return  (val+" litres")
          }
        }
      },
      yaxis: {
        title: {
          text: 'litres (l)',
          style:{
            color: "#abaaa7",
            fontSize: 14,
            
           }
        }
      
      },
      title: {
          text: 'Water Usage Per Category',
          align: "center",
          style:{
            color: "#abaaa7",
            fontSize: 18,
            
           }
      },
     
      legend: {
        show: true
      }
    
  })

  const [series, setSeries] = useState([
    
    {
      name: 'Profit',
      data: []
    }

  ])

  // const [dataa, setData] = useState({})
  
  useEffect(() =>{

    const xAxis = []
    const yAxis = []

     axios.get('/water')
    // .then(res => res.json())
    // .then(
    //   dataa => {
    //     setData(dataa)
    //     console.log("python",dataa)
    //   }
    // )
     .then(response => {
       console.log("response",response)
       response.data.category_usage.map(item => {
         console.log("item",item)
           xAxis.push(item.x)
           yAxis.push(item.y)
       })
       setObject({
         chart: {
           type: 'bar',
           height: 350
         },
         xaxis: {
           categories: xAxis
         },
       })
       setSeries([
       {
        name: 'Water Usage',
        data: yAxis
      },
      ])
       console.log("stats",xAxis,yAxis)
     }).catch(e => {
       alert(e);
     })
    
  
  }, [])
   
      
      
      
    


  return( 
    <div class='diagramContainer'>

      {/* {chartData && chartData?.series && ( */}
        <ReactApexChart
          options={options}
          series={series}
          type="bar"
          height={"100%"} 
          width={"100%"}
        />
      {/* )} */}


        {/* <ReactApexChart options={state.options} series={state.series} type="bar" height={"100%"} width={"100%"}/> */}


 

    </div>
   )

  };
export default Graph6;

-------------------------------------------------------------------------------

Working static graph2 for solar generation capture

import React, { useEffect, useState, useRef} from "react";
import ReactApexChart from "react-apexcharts";
import "../App.css";
import { tokens } from "../theme";
import { useTheme, Typography } from "@mui/material";
import axios from 'axios';
import { BorderAll } from "@mui/icons-material";






// For Sub heading 2 Energy Consumption

const Graph2 = () => {
   
    const chartRef = useRef(null);
    const [data, setData] = useState([
      
        
        {x: new Date("2023-08-01T00:00:00"), "generationValue": 20},
        {x: new Date("2023-08-02T00:00:00"), "generationValue": 3},
        {x: new Date("2023-08-03T00:00:00"), "generationValue": 55},
        {x: new Date("2023-08-04T00:00:00"), "generationValue": 2},
        {x: new Date("2023-08-05T00:00:00"), "generationValue": 25},
        {x: new Date("2023-08-06T00:00:00"), "generationValue": 36},
        {x: new Date("2023-08-07T00:00:00"), "generationValue": 66},
        {x: new Date("2023-08-08T00:00:00"), "generationValue": 77},
        {x: new Date("2023-08-09T00:00:00"), "generationValue": 89},
        {x: new Date("2023-08-10T00:00:00"), "generationValue": 34},
        {x: new Date("2023-08-11T00:00:00"), "generationValue": 11},
        {x: new Date("2023-08-12T00:00:00"), "generationValue": 5},
       
     
  
      ])


      const numDisplayPoints = 8; // Number of points to display at a time

      // State to hold the currently displayed data
    const [displayedData, setDisplayedData] = useState(
      data.slice(0, numDisplayPoints)
    );
    
    // Counter to keep track of the data index
    const [dataIndex, setDataIndex] = useState(numDisplayPoints);
    
    useEffect(() => {
      const interval = setInterval(() => {
        // Get the next data point to display
        const nextDataPoint = data[dataIndex];
    
        if (nextDataPoint) {
          // Add the next data point to the displayed data
          const newDisplayedData = [...displayedData, nextDataPoint];
    
          // Trim the displayed data to maintain 8 points
          if (newDisplayedData.length > numDisplayPoints) {
            newDisplayedData.shift();
          }
          // Update the displayed data and x-axis categories
      setDisplayedData(newDisplayedData);

      // Update the x-axis categories with DateTime timestamps
      setObject((prevOptions) => ({
        ...prevOptions,
        xaxis: {
          ...prevOptions.xaxis,
          categories: newDisplayedData.map((item) => item.x.getTime()),
        },
      }));

      // Increment the dataIndex
      setDataIndex((prevIndex) => prevIndex + 1);
    }
  }, 5000); // Time delay in milliseconds (e.g., update every 5 seconds)
  return () => clearInterval(interval);
}, [data, displayedData, dataIndex, numDisplayPoints]);
    
    

  const [options, setObject] = useState({
      chart: {
        type: 'bar',
        height: 350,
        foreColor: "#939695",
       // background: "#e8ebea"
       toolbar:{
        show: false
       }
      },
      noData: {
          text: 'Loading...',
          style:{
          color: "#abaaa7",
          fontSize: "20"
        }
      },
      xaxis: {
        type: "datetime", // Set x-axis type to datetime
        categories: displayedData.map((item) => item.x.getTime()), // Convert DateTime to timestamp
      },
      fill: {
        opacity: 1,
        colors: "#db352c"
      },
      tooltip: {
        //Hover Box
        enabled: true,
        theme: "dark",
        y: {
          formatter: function (val) {
            return  (val + " Kw/h")
          }
        }
      },
      yaxis: {
        title: {
          text: 'KW/h',
          style:{
            color: "#abaaa7",
            fontSize: 14,
            
           }
        }
      }, plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      title: {
          text: 'Building Energy Consumption',
          align: "center",
          style:{
            color: "#abaaa7",
            fontSize: 18,
           }
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      legend: {
        show: true
      }
    
  })

  const series = [
    { 
      name: "Energy Generation",
      data: displayedData.map((item) => item.generationValue) 
    }
    
    // {
    //   name: 'Profit',
    //   data: []
    // }

  ]

 

  
  // useEffect(() =>{

  //   const xAxis = []
  //   const yAxis = []



  //   axios.get('/electricity')
  //   // .then(res => res.json())
  //   // .then(
  //   //   dataa => {
  //   //     setData(dataa)
  //   //     console.log("python",dataa)
  //   //   }
  //   // )
  //    .then(response => {
  //      console.log("response",response)
  //      response.data.energy_consumption.map(item => {
  //        console.log("item",item)
  //          xAxis.push(item.time)
  //          yAxis.push(item.load_power)
  //      })
  //      setObject({
  //        chart: {
  //          type: 'bar',
  //          height: 350
  //        },
  //        xaxis: {
           
  //          categories: xAxis
  //        },
  //      })
  //      setSeries([
  //      {
  //        name: 'Energy',
  //        data: yAxis
  //      },
       
  //     ])
  //      console.log("stats",xAxis,yAxis)
  //    }).catch(e => {
  //      alert(e);
  //    })
    
  
  // }, [])
   
 
      
    


  return( 
    <div class='diagramContainer'>

      {/* {chartData && chartData?.series && ( */}
        <ReactApexChart
          options={options}
          series={series}
          type="bar"
          height={"100%"} 
          width={"100%"}
          ref={chartRef}
        />
      {/* )} */}


        {/* <ReactApexChart options={state.options} series={state.series} type="bar" height={"100%"} width={"100%"}/> */}


 

    </div>
   )

  };
export default Graph2;


---------------------------------------------------------------

Working graph6 for static Water usage categories

import React, { useEffect, useState, useRef} from "react";
import ReactApexChart from "react-apexcharts";
import "../App.css";
import { tokens } from "../theme";
import { useTheme, Typography } from "@mui/material";
import axios from 'axios';






// For Sub heading 4 WATER USAGE

const Graph6 = () => {

  const staticData = [

    {
      date: "2023-08-01",
      data: [
        { "x": "Toilets", "y": 988 },
        { "x": "Hot Water", "y": 0 },
        { "x": "Cold Water", "y": 147 },
        { "x": "Washing", "y": 150 },
      ],
    },
    {
      date: "2023-08-02",
      data: [
        { "x": "Toilets", "y": 5 },
        { "x": "Hot Water", "y": 10 },
        { "x": "Cold Water", "y": 15 },
        { "x": "Washing", "y": 20 },
      ],
    },
   
  ]

  const [dataIndex, setDataIndex] = useState(0);
  const [data, setData] = useState(staticData[dataIndex].data);
   
  const options ={
      chart: {
        type: 'bar',
        foreColor: "#939695",
        
      },
      noData: {
        text: 'Loading...',
        style:{
        color: "#abaaa7",
        fontSize: "20"
      }
    },
      xaxis: {
        // title: {
        //   text: ""
        // },
        //categories: [],
        categories: data.map(item => item.x),   //displayedData.map((item) => item.x),
        title:{
          text: staticData[dataIndex].date,
        }
      },
      fill: {
        opacity: 1
      },
      dataLabels: {
        enabled: false
      },
      tooltip: {
        //Hover Box
        enabled: true,
        theme: "dark",
        y: {
          formatter: function (val) {
            return  (val+" litres")
          }
        }
      },
      yaxis: {
        title: {
          text: 'litres (l)',
          style:{
            color: "#abaaa7",
            fontSize: 14,
            
           }
        }
      
      },
      title: {
          text: 'Water Usage Per Category',
          align: "center",
          style:{
            color: "#abaaa7",
            fontSize: 18,
            
           }
      },
     
      legend: {
        show: true
      }
    
  }

  const series = [{ data: data.map(item => item.y) }];

  useEffect(() => {
    if (dataIndex < staticData.length - 1) {
      const interval = setInterval(() => {
        const nextIndex = dataIndex + 1;

        setDataIndex(nextIndex);
        setData(staticData[nextIndex].data);

        if (nextIndex === staticData.length - 1) {
          clearInterval(interval);
        }
      }, 5000); // Adjust the time interval as needed

      return () => clearInterval(interval);
    }
  }, [dataIndex]);

  // useEffect(() => {
  //   const interval = setInterval(() => {
  //     // Calculate the next index or loop back to the beginning
  //     const nextIndex = (dataIndex + 1) % staticData.length;

  //     // Update the chart data and options
  //     setDataIndex(nextIndex);
  //     setData(staticData[nextIndex]);

  //     // You can also update other chart options here if needed

  //   }, 5000); // Adjust the time interval (in milliseconds) as needed

  //   return () => clearInterval(interval);
  // }, [dataIndex]);

   
  
  // useEffect(() =>{

  //   const xAxis = []
  //   const yAxis = []

  //   //  axios.get('/water')
  //   //  .then(res => res.json())
  //   //  .then(
  //   //    dataa => {
  //   //      setData(dataa)
  //   //      console.log("python",dataa)
  //   //    }
  //   //  )

  //   //  .then(response => {
  //   //    console.log("response",response)
  //   //    response.data.dataUsage.map(item => {
  //   //      console.log("item",item)
  //   //        xAxis.push(item.c)
  //   //        yAxis.push(item.cValue)
  //   //    })
  //   //   })
  //   //    setObject({
  //   //      chart: {
  //   //        type: 'bar',
  //   //        height: 350
  //   //      },
  //   //      xaxis: {
  //   //        categories: xAxis
  //   //      },
  //   //    })
  //   //    setSeries([
  //   //    {
  //   //     name: 'Water Usage',
  //   //     data: yAxis
  //   //   },
  //   //   ])
  //   //    console.log("stats",xAxis,yAxis)
  //   //  }).catch(e => {
  //   //    alert(e);
  //   //  })
    
  
  // }, [])
   
      
      
      
    


  return( 
    <div class='diagramContainer'>

      {/* {chartData && chartData?.series && ( */}
        <ReactApexChart
          options={options}
          series={series}
          type="bar"
          height={"100%"} 
          width={"100%"}
         
        />
      {/* )} */}


        {/* <ReactApexChart options={state.options} series={state.series} type="bar" height={"100%"} width={"100%"}/> */}


 

    </div>
   )

  };
export default Graph6;

------------------------------------------------------------------

Fully working graph2 with Server.py Api

import React, { useEffect, useState} from "react";
import ReactApexChart from "react-apexcharts";
import "../App.css";
import { tokens } from "../theme";
import { useTheme, Typography } from "@mui/material";
import axios from 'axios';
import { BorderAll } from "@mui/icons-material";






// For Sub heading 2 Energy Consumption

const Graph2 = () => {

  const [options, setObject] = useState({
      chart: {
        type: 'bar',
        height: 350,
        foreColor: "#939695",
       // background: "#e8ebea"
       toolbar:{
        show: false
       }
      },
      noData: {
          text: 'Loading...',
          style:{
          color: "#abaaa7",
          fontSize: "20"
        }
      },
      xaxis: {
        categories: [],
      },
      fill: {
        opacity: 1,
        colors: "#db352c"
      },
      tooltip: {
        //Hover Box
        enabled: true,
        theme: "dark",
        y: {
          formatter: function (val) {
            return  (val + " Kw/h")
          }
        }
      },
      yaxis: {
        title: {
          text: 'KW/h',
          style:{
            color: "#abaaa7",
            fontSize: 14,
            
           }
        }
      }, plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      title: {
          text: 'Building Energy Consumption',
          align: "center",
          style:{
            color: "#abaaa7",
            fontSize: 18,
           }
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      legend: {
        show: true
      }
    
  })

  const [series, setSeries] = useState([
    {
      name: 'Energy',
      data: []
    },
    

  ])
const definiteX = []
  // const [dataa, setData] = useState({})
  
  useEffect(() =>{

    const xAxis = []
    const yAxis = []



    axios.get('/electricity')
    // .then(res => res.json())
    // .then(
    //   dataa => {
    //     setData(dataa)
    //     console.log("python",dataa)
    //   }
    // )
     .then(response => {
       console.log("response",response)
       response.data.energy_consumption.map(item => {
         console.log("item",item)
           xAxis.push(item.time)
           yAxis.push(item.load_power)
       })
       setObject({
         chart: {
           type: 'bar',
           height: 350
         },
         xaxis: {
           
           categories: xAxis
         },
       })
       setSeries([
       {
         name: 'Energy',
         data: yAxis
       },
       
      ])
       console.log("stats",xAxis,yAxis)
     }).catch(e => {
       alert(e);
     })
    
  
  }, [])
   
  const divStyle = {
    border: '1px solid #e0e0e0', // Border width, style, and color
   
  };
      
      
    


  return( 
    <div class='diagramContainer'>

      {/* {chartData && chartData?.series && ( */}
        <ReactApexChart
          options={options}
          series={series}
          type="bar"
          height={"100%"} 
          width={"100%"}
        />
      {/* )} */}


        {/* <ReactApexChart options={state.options} series={state.series} type="bar" height={"100%"} width={"100%"}/> */}


 

    </div>
   )

  };
export default Graph2;

----------------------------------------------

Server.py file

from flask import Flask, jsonify
import random
import requests


# baseURL = "http://localhost:3000/"


app = Flask(__name__)

category_Water_data = [
    {
        "date": "2023-08-01",
        "data": [
            {"x": "Toilets", "y": 988},
            {"x": "Hot Water", "y": 0},
            {"x": "Cold Water", "y": 147},
            {"x": "Washing", "y": 150},
        ],
    },
    {
        "date": "2023-08-02",
        "data": [
            {"x": "Toilets", "y": 5},
            {"x": "Hot Water", "y": 10},
            {"x": "Cold Water", "y": 15},
            {"x": "Washing", "y": 20},
        ],
    },
     {
        "date": "2023-08-03",
        "data": [
            {"x": "Toilets", "y": 9},
            {"x": "Hot Water", "y": 22},
            {"x": "Cold Water", "y": 13},
            {"x": "Washing", "y": 3},
        ],
    },
]

#API routes
@app.route("/electricity")
def electricalEnergyData():

    num = 90
    num2 = random.randint(1, 100)
    data = {
    "energy_consumption": [
      {
        "time": "00:00",
        "load_power": num
        
      },
      {
        "time": "03:00",
        "load_power": 55.21
      },
      {
        "time": "06:00",
        "load_power": 48.71
      },
      {
        "time": "09:00",
        "load_power": 95.55
      },
      {
        "time": "12:00",
        "load_power": 80.13
      },
      {
        "time": "15:00",
        "load_power": 58.62
      },
      {
        "time": "18:00",
        "load_power": 61.34
      },
      {
        "time": "21:00",
        "load_power": 0
      },
      {
        "time": "23:55",
        "load_power": num2
      },
    ],

    "energy_generation":[
        {
            "time": "00:00",
            "power_produced": 0,
            "irradiance" : 0,
            "cost": 0
        },
         {
            "time": "03:00",
            "power_produced": 0,
            "irradiance" : 0,
            "cost": 0
        },
         {
            "time": "06:00",
            "power_produced": 0,
            "irradiance" : 0,
            "cost": 0
        },
         {
            "time": "09:00",
            "power_produced": 17.7,
            "irradiance" : 400.37,
            "cost": 23.51
        },
         {
            "time": "12:00",
            "power_produced": 17.42,
            "irradiance" : 397.5,
            "cost": 23.13
        },
        {
            "time": "15:00",
            "power_produced": 36.7,
            "irradiance" : 750.84,
            "cost": 48.74
        },
        {
            "time": "18:00",
            "power_produced": 0.78,
            "irradiance" : 28.54,
            "cost": 1.04
        },
        {
            "time": "21:00",
            "power_produced": 0,
            "irradiance" : 0,
            "cost": 0
        },
        {
            "time": "23:55",
            "power_produced": 0,
            "irradiance" : 0,
            "cost": 0
        }
    ],
    }
   
    return jsonify(data)

@app.route("/waterUsagePerCat")
def waterUsage():
   
    return jsonify(category_Water_data)

if __name__ == "__main__":
    app.run(debug=True)

 # #return {"yearly" : ['hello1','hello2','hello3']}

    #  response = requests.get(baseURL + endpoint)
    # # #print(response)

    #  data = response.json()  # storing all data in variable
    # # #print(data[0]['x'])

    #  return(data)


#  "floor_usage":[
#             {
#                 "x": "Ground floor",
#                 "y": 509,
#                 "water_cost": 20.36
#             },
#             {
#                 "x": "First floor",
#                 "y": 835,
#                 "water_cost": 33.4
#             },
#             {
#                 "x": "Second floor",
#                 "y": 248,
#                 "water_cost": 9.92
#             },
#             {
#                 "x": "Thrid Floor",
#                 "y": 0,
#                 "water_cost": 0
#             },
#         ]
    














# def get_vcom_data():
#     api_key = "gpbgpSav1s"
#     username = "wanda_majikijela"
#     password = "solar_meteo2022"
 
#     url = "https://api.meteocontrol.de/v2/session"
    
#     credentials = f"{username}:{password}"
    
#     credentials_base64 = base64.b64encode(credentials.encode()).decode()
    
#     headers = {
#         "Authorization": f"Basic {credentials_base64}",
#         "X-API-KEY": api_key
#         }
 
#     response = requests.get(url, headers=headers)  # response should be 'Response [200]'
 
#     print(response)
 
#     if response.status_code == 200:
#         return response.json() #returns actual data
#     else:
#         return None

# get_vcom_data()


-----------------------------------------------------------------------

Fully working api graph2 for solar generation and building consumption

import React, { useEffect, useState, useRef} from "react";
import ReactApexChart from "react-apexcharts";
import "../App.css";
import { tokens } from "../theme";
import { useTheme, Typography } from "@mui/material";
import axios from 'axios';
import { BorderAll } from "@mui/icons-material";






// For Sub heading 2 Energy Consumption

const Graph2 = () => {
   
  const chartRef = useRef(null);
  const numDisplayPoints = 8;
  const [displayedData, setDisplayedData] = useState([]);
  const [dataIndex, setDataIndex] = useState(0);
  const [dataHistory, setDataHistory] = useState([]);


  const [options, setOptions] = useState({
      chart: {
        type: 'bar',
        height: 350,
        foreColor: "#939695",
       // background: "#e8ebea"
       toolbar:{
        show: false
       }
      },
      
      noData: {
          text: 'Loading...',
          style:{
          color: "#abaaa7",
          fontSize: "20"
        }
      },
      
      fill: {
        opacity: 1,
        colors: "#db352c"
      },
      tooltip: {
        //Hover Box
        enabled: true,
        theme: "dark",
        y: {
          formatter: function (val) {
            return  (val + " Kw/h")
          }
        }
      },
      yaxis: {
        title: {
          text: 'KW/h',
          style:{
            color: "#abaaa7",
            fontSize: 14,
            
           }
        }
      }, plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      title: {
          text: 'Building Energy Consumption',
          align: "center",
          style:{
            color: "#abaaa7",
            fontSize: 18,
           }
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      legend: {
        show: true
      }
    
  })

  const [series, setSeries] = useState([
    {
      name: "Energy Generation",
      data: [], // Initially empty
    },
    // Other series...
  ]);

  const updateChart = (newData) => {
    // Update series data
    const updatedSeries = [
      {
        ...series[0],
        data: newData.map((item) => item.generationValue),
      },
      // Other series...
    ];

    // Update x-axis categories with formatted date strings
    const updatedOptions = {
      ...options,
      xaxis: {
        ...options.xaxis,
        categories: newData.map((item) => {const date = new Date(item.x);
          // Format the date as "dd MMM" (adjust the format as needed)
          return `${date.getDate()} ${date.toLocaleString("default", {
            month: "short",
          })}`;
        }),
      },
    };

    // Set the updated series and options
    setSeries(updatedSeries);
    setOptions(updatedOptions);
  };

  const fetchData = async () => {try {
    const response = await fetch("/solarGeneration"); // Replace with your API endpoint
    if (!response.ok) {
      throw new Error("Failed to fetch data");
    }
    const data = await response.json();

    // Parse the date strings into JavaScript Date objects
    const parsedData = data.map((item) => ({
      x: new Date(item.x),
      generationValue: item.generationValue,
    }));

    setDataHistory([...dataHistory, ...parsedData]);

    // Check if all data is fetched
    if (dataHistory.length === parsedData.length) {// Initial chart update with the first 8 data points
      updateChart(dataHistory.slice(0, numDisplayPoints));
    }
  } catch (error) {
    console.error(error);
  }
};

useEffect(() => {
  // Fetch data initially
  fetchData();

  // Fetch data every 10 minutes
  const fetchInterval = setInterval(fetchData, 10 * 60 * 1000);

  // Cleanup: clear the interval when the component unmounts
  return () => clearInterval(fetchInterval);
}, []);

useEffect(() => {
  const interval = setInterval(() => {
    if (dataIndex < dataHistory.length) {
      const nextDataPoint = dataHistory[dataIndex];
      const newDisplayedData = [...displayedData, nextDataPoint].slice(-numDisplayPoints);

      setDisplayedData(newDisplayedData);
      setDataIndex((prevIndex) => prevIndex + 1);

      // Update the chart with the new data
      updateChart(newDisplayedData);
    }
  }, 5000);
  // Cleanup: clear the interval when the component unmounts
  return () => clearInterval(interval);
}, [dataIndex, displayedData, numDisplayPoints, dataHistory]);
  // useEffect(() =>{

  //   const xAxis = []
  //   const yAxis = []



  //   axios.get('/electricity')
  //   // .then(res => res.json())
  //   // .then(
  //   //   dataa => {
  //   //     setData(dataa)
  //   //     console.log("python",dataa)
  //   //   }
  //   // )
  //    .then(response => {
  //      console.log("response",response)
  //      response.data.energy_consumption.map(item => {
  //        console.log("item",item)
  //          xAxis.push(item.time)
  //          yAxis.push(item.load_power)
  //      })
  //      setObject({
  //        chart: {
  //          type: 'bar',
  //          height: 350
  //        },
  //        xaxis: {
           
  //          categories: xAxis
  //        },
  //      })
  //      setSeries([
  //      {
  //        name: 'Energy',
  //        data: yAxis
  //      },
       
  //     ])
  //      console.log("stats",xAxis,yAxis)
  //    }).catch(e => {
  //      alert(e);
  //    })
    
  
  // }, [])
   
 
      
    


  return( 
    <div class='diagramContainer'>

      {/* {chartData && chartData?.series && ( */}
        <ReactApexChart
          options={options}
          series={series}
          type="bar"
          height={"100%"} 
          width={"100%"}
          ref={chartRef}
        />
      {/* )} */}


        {/* <ReactApexChart options={state.options} series={state.series} type="bar" height={"100%"} width={"100%"}/> */}


 

    </div>
   )

  };
export default Graph2;


-------------------------------------------------------------------------------------

Final Final Final graph2 working api

import React, { useEffect, useState, useRef} from "react";
import ReactApexChart from "react-apexcharts";
import "../App.css";
import { tokens } from "../theme";
import { useTheme, Typography } from "@mui/material";
import axios from 'axios';
import { BorderAll } from "@mui/icons-material";






// For Sub heading 2 Energy Consumption

const Graph2 = () => {
   
  const chartRef = useRef(null);
  const numDisplayPoints = 8;
  const [displayedData, setDisplayedData] = useState([]);
  const [dataIndex, setDataIndex] = useState(0);
  const [dataHistory, setDataHistory] = useState([]);
  const [isPaused, setIsPaused] = useState(false);


  const [options, setOptions] = useState({
      chart: {
        type: 'bar',
        height: 350,
        foreColor: "#939695",
       // background: "#e8ebea"
       toolbar:{
        show: false
       }
      },
      
      noData: {
          text: 'Loading...',
          style:{
          color: "#abaaa7",
          fontSize: "20"
        }
      },
      
      fill: {
        opacity: 1,
        colors: "#db352c"
      },
      tooltip: {
        //Hover Box
        enabled: true,
        theme: "dark",
        y: {
          formatter: function (val) {
            return  (val + " Kw/h")
          }
        }
      },
      yaxis: {
        title: {
          text: 'KW/h',
          style:{
            color: "#abaaa7",
            fontSize: 14,
            
           }
        }
      }, plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      title: {
          text: 'Building Energy Consumption',
          align: "center",
          style:{
            color: "#abaaa7",
            fontSize: 18,
           }
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      legend: {
        show: true
      }
    
  })

  const [series, setSeries] = useState([
    {
      name: "Energy Generation",
      data: [], // Initially empty
    },
    // Other series...
  ]);

  const updateChart = (newData) => {
    // Update series data
    const updatedSeries = [
      {
        ...series[0],
        data: newData.map((item) => item.generationValue),
      },
      // Other series...
    ];

    // Update x-axis categories with formatted date strings
    const updatedOptions = {
      ...options,
      xaxis: {
        ...options.xaxis,
        categories: newData.map((item) => {const date = new Date(item.x);
          // Format the date as "dd MMM" (adjust the format as needed)
          return `${date.getDate()} ${date.toLocaleString("default", {
            month: "short",
          })}`;
        }),
      },
    };

    // Set the updated series and options
    setSeries(updatedSeries);
    setOptions(updatedOptions);
  };

  const fetchData = async () => {try {
    const response = await fetch("/solarGeneration"); // Replace with your API endpoint
    if (!response.ok) {
      throw new Error("Failed to fetch data");
    }
    const data = await response.json();

    // Parse the date strings into JavaScript Date objects
    const parsedData = data.map((item) => ({
      x: new Date(item.x),
      generationValue: item.generationValue,
    }));

    setDataHistory([...dataHistory, ...parsedData]);

    // Check if all data is fetched
    if (dataHistory.length === parsedData.length) {// Initial chart update with the first 8 data points
      updateChart(dataHistory.slice(0, numDisplayPoints));
    }
  } catch (error) {
    console.error(error);
  }
};

useEffect(() => {
  // Fetch data initially
  fetchData();

  // Fetch data every 10 minutes
  const fetchInterval = setInterval(fetchData, 10 * 60 * 1000);

  // Cleanup: clear the interval when the component unmounts
  return () => clearInterval(fetchInterval);
}, []);

useEffect(() => {
  const interval = setInterval(() => {
    if (dataIndex < dataHistory.length && !isPaused) {
      const nextDataPoint = dataHistory[dataIndex];
      const newDisplayedData = [...displayedData, nextDataPoint].slice(-numDisplayPoints);

      setDisplayedData(newDisplayedData);
      setDataIndex((prevIndex) => prevIndex + 1);

      // Update the chart with the new data
      updateChart(newDisplayedData);
    }
  }, 5000);
// Cleanup: clear the interval when the component unmounts
return () => clearInterval(interval);
}, [dataIndex, displayedData, numDisplayPoints, dataHistory, isPaused]);



const displayFirst4Points = () => {
  setIsPaused(true);
  // Display the first 4 data points
  updateChart(dataHistory.slice(0, 4));
};

const displayFirst10Points = () => {
  setIsPaused(true);
  // Display the first 10 data points
  updateChart(dataHistory.slice(0, 10));
};

const resumeUpdates = () => {
  setIsPaused(false);
};






  // useEffect(() =>{

  //   const xAxis = []
  //   const yAxis = []



  //   axios.get('/electricity')
  //   // .then(res => res.json())
  //   // .then(
  //   //   dataa => {
  //   //     setData(dataa)
  //   //     console.log("python",dataa)
  //   //   }
  //   // )
  //    .then(response => {
  //      console.log("response",response)
  //      response.data.energy_consumption.map(item => {
  //        console.log("item",item)
  //          xAxis.push(item.time)
  //          yAxis.push(item.load_power)
  //      })
  //      setObject({
  //        chart: {
  //          type: 'bar',
  //          height: 350
  //        },
  //        xaxis: {
           
  //          categories: xAxis
  //        },
  //      })
  //      setSeries([
  //      {
  //        name: 'Energy',
  //        data: yAxis
  //      },
       
  //     ])
  //      console.log("stats",xAxis,yAxis)
  //    }).catch(e => {
  //      alert(e);
  //    })
    
  
  // }, [])
   
 
      
    


  return( 
    <div class='diagramContainer'>
      <div>
      <button onClick={resumeUpdates}>Live</button>
        <button onClick={displayFirst4Points}>4</button>
        <button onClick={displayFirst10Points}>10</button>
      </div>

        <ReactApexChart
          options={options}
          series={series}
          type="bar"
          height={"100%"} 
          width={"100%"}
          ref={chartRef}
        />
      


        {/* <ReactApexChart options={state.options} series={state.series} type="bar" height={"100%"} width={"100%"}/> */}


 

    </div>
   )

  };
export default Graph2;

--------------------------------------------------------------------------

Fine working updating graph2 from api solarGeneration data

import React, { useEffect, useState, useRef} from "react";
import ReactApexChart from "react-apexcharts";
import "../App.css";
import { tokens } from "../theme";
import { useTheme, Typography } from "@mui/material";
import axios from 'axios';






// For Sub heading 4 WATER USAGE

const Graph2 = () => {

 

  const [data, setData] = useState([]);
  const [xAxisCategories, setXAxisCategories] = useState([]);
  const [xAxisTitle, setXAxisTitle] = useState("");
  const [currentIndex, setCurrentIndex] = useState(0);
   
  const options ={
      chart: {
        type: 'bar',
        foreColor: "#939695",
        
      },
      noData: {
        text: 'Loading...',
        style:{
        color: "#abaaa7",
        fontSize: "20"
      }
    },
      xaxis: {
        // title: {
        //   text: ""
        // },
        //categories: [],
        categories: xAxisCategories,   //displayedData.map((item) => item.x),
        title:{
          text: xAxisTitle,
        },
        labels: {
          formatter: function (value) {
            // Format the value to display only hours and minutes
            const date = new Date(value);
            return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false});
          },
        },
      },
      fill: {
        opacity: 1
      },
      dataLabels: {
        enabled: false
      },
      tooltip: {
        //Hover Box
        enabled: true,
        theme: "dark",
        y: {
          formatter: function (val) {
            return  (val+" litres")
          }
        }
      },
      yaxis: {
        title: {
          text: 'Kw/h',
          style:{
            color: "#abaaa7",
            fontSize: 14,
            
           }
        }
      
      },
      title: {
          text: 'Energy Consumption',
          align: "center",
          style:{
            color: "#abaaa7",
            fontSize: 18,
            
           }
      },
     
      legend: {
        show: true
      }
    
  }

  useEffect(() => {
    const fetchData = () => {
      axios.get("/allDataTemp")
        .then(response => {
          const staticData = response.data;
          if (currentIndex < staticData.length) {
            const currentData = staticData[currentIndex];

            // Filter out the "dailyAverage" data from the "data" array
            const filteredData = currentData.data.filter(item => item.x !== currentData.dailyAverage.dailyDate);

            setData(filteredData);
            setXAxisCategories(filteredData.map(item => item.x));
            setXAxisTitle(currentData.date);
            // Set a timeout to increment the index and fetch the next data
            setTimeout(() => {
              setCurrentIndex(currentIndex + 1);
            }, 5000); // Adjust the time interval as needed
          }
        })
        .catch(error => {
          console.error("Error fetching data:", error);
        });
    };

    fetchData();
  }, [currentIndex]);

  const series = [{ data: data.map(item => item.solarGeneration) }];


  // useEffect(() => {
  //   const interval = setInterval(() => {
  //     // Calculate the next index or loop back to the beginning
  //     const nextIndex = (dataIndex + 1) % staticData.length;

  //     // Update the chart data and options
  //     setDataIndex(nextIndex);
  //     setData(staticData[nextIndex]);

  //     // You can also update other chart options here if needed

  //   }, 5000); // Adjust the time interval (in milliseconds) as needed

  //   return () => clearInterval(interval);
  // }, [dataIndex]);

   
  
  // useEffect(() =>{

  //   const xAxis = []
  //   const yAxis = []

  //   //  axios.get('/water')
  //   //  .then(res => res.json())
  //   //  .then(
  //   //    dataa => {
  //   //      setData(dataa)
  //   //      console.log("python",dataa)
  //   //    }
  //   //  )

  //   //  .then(response => {
  //   //    console.log("response",response)
  //   //    response.data.dataUsage.map(item => {
  //   //      console.log("item",item)
  //   //        xAxis.push(item.c)
  //   //        yAxis.push(item.cValue)
  //   //    })
  //   //   })
  //   //    setObject({
  //   //      chart: {
  //   //        type: 'bar',
  //   //        height: 350
  //   //      },
  //   //      xaxis: {
  //   //        categories: xAxis
  //   //      },
  //   //    })
  //   //    setSeries([
  //   //    {
  //   //     name: 'Water Usage',
  //   //     data: yAxis
  //   //   },
  //   //   ])
  //   //    console.log("stats",xAxis,yAxis)
  //   //  }).catch(e => {
  //   //    alert(e);
  //   //  })
    
  
  // }, [])
   
      
      
      
    


  return( 
    <div class='diagramContainer'>

      {/* {chartData && chartData?.series && ( */}
        <ReactApexChart
          options={options}
          series={series}
          type="bar"
          height={"100%"} 
          width={"100%"}
         
        />
      {/* )} */}


        {/* <ReactApexChart options={state.options} series={state.series} type="bar" height={"100%"} width={"100%"}/> */}


 

    </div>
   )

  };
export default Graph2;

